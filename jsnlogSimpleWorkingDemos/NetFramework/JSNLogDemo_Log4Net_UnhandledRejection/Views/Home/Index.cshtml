@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>JSNLogDemo_Log4Net_UnhandledRejection</title>
	
    @Html.Raw(JSNLog.JavascriptLogging.Configure())
	
    <script src="~/scripts/jsnlogdemo.js"></script>
</head>
<body>
    <h1>JSNLogDemo_Log4Net_UnhandledRejection</h1>
	
	<h2>Welcome to this simple demo</h2>
	<p>
	This page loads file <i>scripts/jsnlogdemo.js</i> (contained in this web project). 
	It has a few lines of simple JavaScript code to send log messages to the server immediately when the file loads. Have a look.
	</p>
	<p>
    To keep things simple, this project stores the log entries in a file in the Logs directory in the web project. 
	This is very configurable. The installation page shows how to make JSNLog work with your server side logging package.
	</p>
	<p>
    Open the log file in the Logs directory of this project. There you'll find the log entries sent in <i>scripts/jsnlogdemo.js</i>. 
	</p>
	<p>
	To see the log messages going from your page to the web server, open the developer tools of your browser and use the Network tab.
	</p>
	
	<h2>If you are running this on Chrome</h2>
	<p>
	The demo page loads jsnlog.min.js from a CDN. Chrome is known to block this request when the page is served from localhost. As a result, the log entries will not appear in the log file.
	</p>
	<p>
	The solution is to either use another browser to load the demo page (such as Firefox). Or host it on say IIS.
	</p>
	
	<h2>How it works</h2>
	<p>
	JSNLog sets the <i>window.onerror</i> handler when it loads, so uncaught JavaScript exceptions are sent to your server side log.
	However, it will only do that if <i>window.onerror</i> has not already been set 
	(<a href="https://jsnlog.com/Documentation/HowTo/JavascriptErrorHandling">details</a>). That way, if you are setting your own onerror handler, it won't override that.  
	</p>
	
	

<h2>Demo on catching unhandled rejections in promises</h2>

<p>
	This project shows how to log objects that have cyclic references. That is, they somehow refer to themselves.
</p>

<p>
	It does this by:
</p>

<ul>
	<li>
		Importing file 
		<a href="https://github.com/douglascrockford/JSON-js/blob/master/cycle.js" target="_blank">cycle.js</a>, 
		which has a method <i>decycle</i> that replaces cyclic references with a meaningful string.
	</li>
	<li>
		Using the 
		<a href="http://jsnlog.com/Documentation/HowTo/CyclicObjects" target="_blank">serialize</a>
		option to set a custom method to process objects into strings. That custom method uses the <i>decycle</i> method to deal with cyclic references.
	</li>
</ul>

<p>
	Do a View Source on this page
to see JavaScript code that throws an exception in a promise,
but doesn't have a method defined to handle the exception.
</p>
<p>
Because JSNLog sets the <i>window.onunhandledrejection</i> handler (if it is not already set),
it logs the exception. Note that this only works in browsers that support the <i>unhandledrejection</i> event.
In browsers that don't, the exception will not be logged automatically (you'll have to write code to make this happen).
</p>


<script>
    function testPromiseExceptionHandling() {
        // Return a new promise.
        return new Promise(function (resolve, reject) {

            var timeoutExpired = function () {
                resolve("timeout expired");

            };

            throw "Exception thrown in promise";
            setTimeout(timeoutExpired, 5);
        });
    }

    // Note: no rejection handler given. If one had been given, it would have been called to deal with the exception
    testPromiseExceptionHandling().then(function (response) {
        console.log("Success!", response);
    });
</script>

	
	        
    <div>
    </div>
</body>
</html>



