<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
</head>
<body>
    <div>
    <h1>JSNLogDemo_Core_Net7_CORS</h1>
	<h2>Welcome to this simple demo</h2>
	<p>
	This page loads file <i>js/jsnlogdemo.js</i> (contained in this web project). 
	It has a few lines of simple JavaScript code to send log messages to the server immediately when the file loads. Have a look.
	</p>
	

	<p>
		This demo site shows the CORS feature, and so uses 2 domains:
<ol>
        <li>
apicorslocalhost.local - log requests will be sent here. Will be hosted in IIS for this demo.
        </li>
        <li>
localhost - web site sending log request to <i>apicorslocalhost.local</i>. Started by hitting F5.
        </li>
</ol>

<p>
This means you have to host the demo site as <i>apicorslocalhost.local</i> in IIS, so the demo site running in <i>localhost</i> can send log requests to it:
</p>
<ol>
        <li>
If you haven't already done so, <a href="https://www.howtogeek.com/112455/how-to-install-iis-8-on-windows-8/">install IIS</a>.
        <p/>
        </li>
        <li>
Also ensure you have the <a href="https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?view=aspnetcore-7.0#install-the-aspnet-core-modulehosting-bundle">ASP.NET Core Module/Hosting Bundle</a> installed.
        <p/>
        </li>
        <li>
Add <i>apicorslocalhost.local</i> to your hosts file, so the browser resolves it to the loopback IP address:
<pre># normally at C:\Windows\System32\drivers\etc\hosts
	127.0.0.1       apicorslocalhost.local</pre>
        <p/>
        </li>
        <li>
			Publish the site, so it can run from IIS:
			<ol>
					<li>
			Right click JSNLogDemo_Core_Net7_CORS project;
					</li>
					<li>
Choose Publish option;
					</li>
					<li>
			Click Publish button (top right);
					</li>
					<li>
			It will have published to <i>bin\Release\net7.0\publish\</i>.
					</li>
			</ol>
        <p/>
        <li>
Open a command prompt (cmd) with administrator priviliges, and run these commands to add <i>apicorslocalhost.local</i> to IIS
(assumes your <i>jsnlogSimpleWorkingDemos</i> sits under <b style="background-color: #CCFFCF;">C:\Dev\JSNLog</b>, change if needed):
<pre>
appcmd add apppool /name:apicorslocalhost
appcmd add site /name:apicorslocalhost /physicalPath:"<b style="background-color: #CCFFCF;">C:\Dev\JSNLog</b>\jsnlogSimpleWorkingDemos\jsnlogSimpleWorkingDemos\NetCore\JSNLogDemo_Core_Net7_CORS\bin\Debug\net7.0\publish" /bindings:http/*:80:apicorslocalhost.local
appcmd set site /site.name:apicorslocalhost /[path='/'].applicationPool:apicorslocalhost
appcmd start site /site.name:apicorslocalhost
</pre>

        <p/>
        </li>
</ol>


	<p>
    The recommended way to run this demo project is to:
	<ol>
	<li>Make this project the start up project - right click the project | Set as Startup Project.</li>
	<li>Hit F5 to open the home page of the site in your browser.</li>
	</ol>
	</p>
	<p>
	This simple demo site uses the default Net Core logging infrastructure. As a result, all log messages will go to the console,
    including client log messages.
	</p>
	<p>
    You will see those messages in the Output window in Visual Studio.
	</p>

	<p>
	To see the contents of the client side log messages as they travel from the browser to the server:
	<ol>
	<li>Right click anywhere in this page | Inspect</li>
	<li>Click Network tab (right hand side)</li>
	<li>Click Fetch/XHR tab</li>
	<li>F5 to reload the page, so it sends the log messages again</li>
	</ol>
	</p>
	
	<h2>If you are running this on Chrome</h2>
	<p>
	The demo page loads jsnlog.min.js from a CDN. Chrome is known to block this request when the page is served from localhost. As a result, the log entries may not appear in the Output window.
	</p>
	<p>
	The solution is to use another browser, such as Microsoft Edge.
	</p>
	
	<h2>How it works</h2>
	<p>
	JSNLog sets the <i>window.onerror</i> handler when it loads, so uncaught JavaScript exceptions are sent to your server side log.
	However, it will only do that if <i>window.onerror</i> has not already been set 
	(<a href="https://jsnlog.com/Documentation/HowTo/JavascriptErrorHandling">details</a>). That way, if you are setting your own onerror handler, it won't override that.  
	</p>
    </div>

    <script src="/js/jsnlogdemo.js"></script>
	
	
</body>
</html>



